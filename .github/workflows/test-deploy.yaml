name: Test Deployed Env
on:
  workflow_call:

jobs:
  test-deployed-env:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node Environment
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Store Playwright's Version
        run: |
          PLAYWRIGHT_VERSION=$(npm ls @playwright/test | grep @playwright | sed 's/.*@//')
          echo "Playwright's Version: $PLAYWRIGHT_VERSION"
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV

      - name: Cache Playwright Browsers
        uses: actions/cache@v3
        id: cache-playwright
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install Playwright Browsers # Installs Playwright if the current version is different from the cached version
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Run E2E Tests
        run: npm run test:e2e
        env:
          FLAGSMITH_KEY: ${{ secrets.FLAGSMITH_KEY }} # For feature flagging
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-deploy-test
          path: playwright-report-deploy-test/

      - name: Send a Slack Message on Failure # Notify slack channel if workflow fails with a link to the workflow
        uses: slackapi/slack-github-action@v1.24.0
        if: failure()
        with:
          payload: |
            {
            "blocks": [
                {
                "type": "section",
                "text": {
                "type": "mrkdwn",
                "text": ":bug: *<https://github.com/${{github.repository}}/actions/runs/${{ github.run_id }}|${{ github.workflow }} workflow run>* failed. Testing in deployed environment failed"
                }
                }
            ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
